<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vm="clr-namespace:MVVMFirma.ViewModels"
                    xmlns:vw="clr-namespace:MVVMFirma.Views"
                    >
    <DataTemplate DataType="{x:Type vm:StartPageViewModel}">
        <vw:StartPageView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyProjektViewModel}">
        <vw:NowyProjektView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieProjektyViewModel}">
        <vw:WszystkieProjektyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyProjectAssignmentsViewModel}">
        <vw:NowyProjectAssignmentsView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieProjectAssignmentsViewModel}">
        <vw:WszystkieProjectAssignmentsView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyKontraktViewModel}">
        <vw:NowyKontraktView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieKontraktyViewModel}">
        <vw:WszystkieKontraktyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NoweZadanieViewModel}">
        <vw:NoweZadanieView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieZadaniaViewModel}">
        <vw:WszystkieZadaniaView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieTowaryViewModel}">
        <vw:WszystkieTowaryView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyTowarViewModel}">
        <vw:NowyTowarView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyProjectMaterialViewModel}">
        <vw:NowyProjectMaterialView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieProjectMaterialsViewModel}">
        <vw:WszystkieProjectMaterialsView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowaFakturaViewModel}">
        <vw:NowaFakturaView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowaSprzedazViewModel}">
        <vw:NowaSprzedazView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieSprzedazeViewModel}">
        <vw:WszystkieSprzedazeView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowySaleItemViewModel}">
        <vw:NowySaleItemView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieSaleItemsViewModel}">
        <vw:WszystkieSaleItemsView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieFakturyViewModel}">
        <vw:WszystkieFakturyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyWydatekViewModel}">
        <vw:NowyWydatekView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieWydatkiViewModel}">
        <vw:WszystkieWydatkiView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowaPlatnoscViewModel}">
        <vw:NowaPlatnoscView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkiePlatnosciViewModel}">
        <vw:WszystkiePlatnosciView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyKlientViewModel}">
        <vw:NowyKlientView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszyscyKlienciViewModel}">
        <vw:WszyscyKlienciView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszyscyPracownicyViewModel}">
        <vw:WszyscyPracownicyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyPracownikViewModel}">
        <vw:NowyPracownikView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyDzialViewModel}">
        <vw:NowyDzialView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieDzialyViewModel}">
        <vw:WszystkieDzialyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:NowyCzasPracyViewModel}">
        <vw:NowyCzasPracyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:WszystkieCzasyPracyViewModel}">
        <vw:WszystkieCzasyPracyView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:AnalizaPrzychodowIWydatkowViewModel}">
        <vw:AnalizaPrzychodowIWydatkowView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:AnalizaPrzychodowProjektowViewModel}">
        <vw:AnalizaPrzychodowProjektowView />
    </DataTemplate>
    <DataTemplate DataType="{x:Type vm:AnalizaTerminowViewModel}">
        <vw:AnalizaTerminowView />
    </DataTemplate>

    <Style x:Key="MainHCCStyle" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border BorderBrush="#73704F" 
                            BorderThickness="0,0,0,1" 
                            Padding="10,5" 
                            Background="{DynamicResource FluentHeaderBackground}">

                        <TextBlock FontSize="16"
                                   FontWeight="Medium"
                                   Foreground="#73704F"
                                   HorizontalAlignment="Left"
                                   VerticalAlignment="Center"
                                   Text="{TemplateBinding Content}" />
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <!-- 
        This template ensures that content of a HeaderedContentControl 
        fills the available vertical space. 
        -->
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel>
                        <ContentPresenter 
              DockPanel.Dock="Top"
              ContentSource="Header" 
              ContentTemplate="{TemplateBinding HeaderTemplate}" 
              />
                        <ContentPresenter 
              ContentSource="Content" 
              ContentTemplate="{TemplateBinding ContentTemplate}" 
              />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
  This style ensures that the borders in the main window are consistent.
  -->
    <Style x:Key="MainBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="WhiteSmoke" />
        <Setter Property="BorderBrush" Value="#73704F" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="12" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <!--
  This template explains how to render the list of commands on the left
  side in the main window (the 'Control Panel' area).
  -->
    <!-- Efekt Fluent Design -->
    <SolidColorBrush x:Key="FluentBackground" Color="#EEEEEE"/> <!-- Jasne tło -->
    
    <DropShadowEffect x:Key="FluentShadowEffect" Color="#424242" Opacity="0.4" BlurRadius="10"/>
    
    <DataTemplate x:Key="CommandsTemplate">
        <ItemsControl IsTabStop="False" ItemsSource="{Binding}" Margin="10">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Border Background="Transparent" CornerRadius="8" Padding="10" Margin="4">
                        <TextBlock VerticalAlignment="Center" FontSize="16" FontWeight="Medium">
                            <Hyperlink Command="{Binding Path=Command}" Cursor="Hand">
                                <TextBlock Text="{Binding Path=DisplayName}" Foreground="Black">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="Foreground" Value="Black"/>
                                            <Setter Property="FontWeight" Value="Medium"/>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Foreground" Value="RoyalBlue"/>
                                                    <Setter Property="FontWeight" Value="Bold"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </Hyperlink>
                        </TextBlock>
                        <!-- Efekt hover dla całego przycisku -->
                        <Border.Style>
                            <Style TargetType="Border">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="BorderBrush" Value="Transparent"/>
                                <Setter Property="BorderThickness" Value="0"/>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="#D9E6FF"/> <!-- Lekki niebieski jak w Windows 11 -->
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                    </Border>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>
    
    <!-- 
  This template explains how to render 
  a tab item with a close button.
  -->
    <DataTemplate x:Key="ClosableTabItemTemplate">
        <DockPanel Width="170">
            <!-- Nowoczesny przycisk zamykania -->
            <Button 
                Command="{Binding Path=CloseCommand}"
                Cursor="Hand"
                DockPanel.Dock="Right"
                Focusable="False"
                Width="20" Height="20"
                Background="#9D9A83"
                BorderBrush="Transparent"
                Padding="3">

                <!-- Ikona zamknięcia -->
                <TextBlock Text="✖"
                           Foreground="Gray"
                           FontSize="10"
                           FontWeight="Bold"
                           HorizontalAlignment="Center"
                           VerticalAlignment="Center"/>
                
                <Button.Style>
                    <Style TargetType="Button">
                        <Setter Property="Visibility" Value="Visible"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsStartPage}" Value="True">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>

            <!-- Tytuł zakładki -->
            <ContentPresenter 
                Content="{Binding Path=DisplayName}" 
                VerticalAlignment="Center"
                Margin="5,0,0,0"/>
        </DockPanel>
    </DataTemplate>


    <!--
  This template explains how to render the 'Workspace' content area in the main window.
  -->
    <DataTemplate x:Key="WorkspacesTemplate">
        <TabControl 
          IsSynchronizedWithCurrentItem="True" 
          ItemsSource="{Binding}" 
          ItemTemplate="{StaticResource ClosableTabItemTemplate}"
          Margin="4"
          BorderBrush="#73704F" 
          BorderThickness="1"
          />
    </DataTemplate>
    
    <!-- 🔹 STYL WALIDACJI: KOMUNIKAT POD POLEM -->
<Style TargetType="TextBox">
    <Setter Property="Validation.ErrorTemplate">
        <Setter.Value>
            <ControlTemplate>
                <StackPanel Orientation="Vertical"> 
                    <AdornedElementPlaceholder x:Name="textBox"/> <!-- Pole wejściowe -->
                    <ItemsControl Margin="0,5,0,0" ItemsSource="{Binding}"> 
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Foreground="Red" FontSize="12" Text="{Binding ErrorContent}"/>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </StackPanel>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    <Setter Property="ToolTip" Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource Self}}"/>
    <Style.Triggers>
        <Trigger Property="Validation.HasError" Value="True">
            <Setter Property="Background" Value="LightPink"/>
        </Trigger>
    </Style.Triggers>
</Style>

<Style TargetType="DatePicker">
    <Setter Property="Validation.ErrorTemplate">
        <Setter.Value>
            <ControlTemplate>
                <StackPanel Orientation="Vertical">
                    <AdornedElementPlaceholder x:Name="textBox"/>
                    <ItemsControl Margin="0,5,0,0" ItemsSource="{Binding}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Foreground="Red" FontSize="12" Text="{Binding ErrorContent}"/>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </StackPanel>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    <Setter Property="ToolTip" Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource Self}}"/>
    <Style.Triggers>
        <Trigger Property="Validation.HasError" Value="True">
            <Setter Property="Background" Value="LightPink"/>
        </Trigger>
    </Style.Triggers>
</Style>
    
    <!-- Styl dla menu bocznego -->
    <Style x:Key="FluentHoverEffect" TargetType="Border">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <!-- Podkreślenie -->
                <Setter Property="BorderThickness" Value="0,0,2,1"/> 
                <Setter Property="BorderBrush">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,1" EndPoint="1,1">
                            <GradientStop Color="#9e9e9e" Offset="0.0"/> <!-- Jasnoszary -->
                            <GradientStop Color="Transparent" Offset="1.0"/> <!-- Rozmycie w prawo -->
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect BlurRadius="4" Opacity="0.4" Color="#A0A0A0"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Styl dla Hyperlink -->
    <Style TargetType="Hyperlink">
        <Setter Property="Foreground" Value="#333333"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="#1B5E20"/> <!-- Ciemnozielony -->
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Styl dla button z widoku startowego -->
    
    <Style x:Key="FluentButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="#73704F"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Padding" Value="15"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Color="Black" BlurRadius="5" Opacity="0.3"/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                            <GradientStop Color="#FA8072" Offset="0.0"/> <!-- Lekki czerwony -->
                            <GradientStop Color="#E81123" Offset="1.0"/> <!-- Mocniejszy czerwony -->
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="#A80000"/> <!-- Głębszy odcień przy kliknięciu -->
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <SolidColorBrush x:Key="FluentCardBackground" Color="#F8F8F8"/>
    <Style x:Key="FluentCardStyle" TargetType="Border">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                    <GradientStop Color="#F0F0F0" Offset="0.0"/>
                    <GradientStop Color="#E0E0E0" Offset="1.0"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="CornerRadius" Value="12"/>
        <Setter Property="Padding" Value="20"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Color="Black" BlurRadius="8" Opacity="0.2"/>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>